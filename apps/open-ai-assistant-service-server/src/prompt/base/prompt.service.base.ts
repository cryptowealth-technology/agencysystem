/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Prompt as PrismaPrompt,
  PromptHistory as PrismaPromptHistory,
} from "@prisma/client";

export class PromptServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.PromptCountArgs, "select">): Promise<number> {
    return this.prisma.prompt.count(args);
  }

  async prompts(args: Prisma.PromptFindManyArgs): Promise<PrismaPrompt[]> {
    return this.prisma.prompt.findMany(args);
  }
  async prompt(
    args: Prisma.PromptFindUniqueArgs
  ): Promise<PrismaPrompt | null> {
    return this.prisma.prompt.findUnique(args);
  }
  async createPrompt(args: Prisma.PromptCreateArgs): Promise<PrismaPrompt> {
    return this.prisma.prompt.create(args);
  }
  async updatePrompt(args: Prisma.PromptUpdateArgs): Promise<PrismaPrompt> {
    return this.prisma.prompt.update(args);
  }
  async deletePrompt(args: Prisma.PromptDeleteArgs): Promise<PrismaPrompt> {
    return this.prisma.prompt.delete(args);
  }

  async findPromptHistories(
    parentId: string,
    args: Prisma.PromptHistoryFindManyArgs
  ): Promise<PrismaPromptHistory[]> {
    return this.prisma.prompt
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .promptHistories(args);
  }
}
