/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { PromptHistory } from "./PromptHistory";
import { PromptHistoryCountArgs } from "./PromptHistoryCountArgs";
import { PromptHistoryFindManyArgs } from "./PromptHistoryFindManyArgs";
import { PromptHistoryFindUniqueArgs } from "./PromptHistoryFindUniqueArgs";
import { CreatePromptHistoryArgs } from "./CreatePromptHistoryArgs";
import { UpdatePromptHistoryArgs } from "./UpdatePromptHistoryArgs";
import { DeletePromptHistoryArgs } from "./DeletePromptHistoryArgs";
import { Prompt } from "../../prompt/base/Prompt";
import { PromptHistoryService } from "../promptHistory.service";
@graphql.Resolver(() => PromptHistory)
export class PromptHistoryResolverBase {
  constructor(protected readonly service: PromptHistoryService) {}

  async _promptHistoriesMeta(
    @graphql.Args() args: PromptHistoryCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [PromptHistory])
  async promptHistories(
    @graphql.Args() args: PromptHistoryFindManyArgs
  ): Promise<PromptHistory[]> {
    return this.service.promptHistories(args);
  }

  @graphql.Query(() => PromptHistory, { nullable: true })
  async promptHistory(
    @graphql.Args() args: PromptHistoryFindUniqueArgs
  ): Promise<PromptHistory | null> {
    const result = await this.service.promptHistory(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => PromptHistory)
  async createPromptHistory(
    @graphql.Args() args: CreatePromptHistoryArgs
  ): Promise<PromptHistory> {
    return await this.service.createPromptHistory({
      ...args,
      data: {
        ...args.data,

        prompt: args.data.prompt
          ? {
              connect: args.data.prompt,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => PromptHistory)
  async updatePromptHistory(
    @graphql.Args() args: UpdatePromptHistoryArgs
  ): Promise<PromptHistory | null> {
    try {
      return await this.service.updatePromptHistory({
        ...args,
        data: {
          ...args.data,

          prompt: args.data.prompt
            ? {
                connect: args.data.prompt,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PromptHistory)
  async deletePromptHistory(
    @graphql.Args() args: DeletePromptHistoryArgs
  ): Promise<PromptHistory | null> {
    try {
      return await this.service.deletePromptHistory(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Prompt, {
    nullable: true,
    name: "prompt",
  })
  async getPrompt(
    @graphql.Parent() parent: PromptHistory
  ): Promise<Prompt | null> {
    const result = await this.service.getPrompt(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
