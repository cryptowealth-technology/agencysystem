/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  PromptHistory as PrismaPromptHistory,
  Prompt as PrismaPrompt,
} from "@prisma/client";

export class PromptHistoryServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.PromptHistoryCountArgs, "select">
  ): Promise<number> {
    return this.prisma.promptHistory.count(args);
  }

  async promptHistories(
    args: Prisma.PromptHistoryFindManyArgs
  ): Promise<PrismaPromptHistory[]> {
    return this.prisma.promptHistory.findMany(args);
  }
  async promptHistory(
    args: Prisma.PromptHistoryFindUniqueArgs
  ): Promise<PrismaPromptHistory | null> {
    return this.prisma.promptHistory.findUnique(args);
  }
  async createPromptHistory(
    args: Prisma.PromptHistoryCreateArgs
  ): Promise<PrismaPromptHistory> {
    return this.prisma.promptHistory.create(args);
  }
  async updatePromptHistory(
    args: Prisma.PromptHistoryUpdateArgs
  ): Promise<PrismaPromptHistory> {
    return this.prisma.promptHistory.update(args);
  }
  async deletePromptHistory(
    args: Prisma.PromptHistoryDeleteArgs
  ): Promise<PrismaPromptHistory> {
    return this.prisma.promptHistory.delete(args);
  }

  async getPrompt(parentId: string): Promise<PrismaPrompt | null> {
    return this.prisma.promptHistory
      .findUnique({
        where: { id: parentId },
      })
      .prompt();
  }
}
