/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PromptHistoryService } from "../promptHistory.service";
import { PromptHistoryCreateInput } from "./PromptHistoryCreateInput";
import { PromptHistory } from "./PromptHistory";
import { PromptHistoryFindManyArgs } from "./PromptHistoryFindManyArgs";
import { PromptHistoryWhereUniqueInput } from "./PromptHistoryWhereUniqueInput";
import { PromptHistoryUpdateInput } from "./PromptHistoryUpdateInput";

export class PromptHistoryControllerBase {
  constructor(protected readonly service: PromptHistoryService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: PromptHistory })
  async createPromptHistory(
    @common.Body() data: PromptHistoryCreateInput
  ): Promise<PromptHistory> {
    return await this.service.createPromptHistory({
      data: {
        ...data,

        prompt: data.prompt
          ? {
              connect: data.prompt,
            }
          : undefined,
      },
      select: {
        change: true,
        createdAt: true,
        id: true,

        prompt: {
          select: {
            id: true,
          },
        },

        timestamp: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [PromptHistory] })
  @ApiNestedQuery(PromptHistoryFindManyArgs)
  async promptHistories(
    @common.Req() request: Request
  ): Promise<PromptHistory[]> {
    const args = plainToClass(PromptHistoryFindManyArgs, request.query);
    return this.service.promptHistories({
      ...args,
      select: {
        change: true,
        createdAt: true,
        id: true,

        prompt: {
          select: {
            id: true,
          },
        },

        timestamp: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: PromptHistory })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async promptHistory(
    @common.Param() params: PromptHistoryWhereUniqueInput
  ): Promise<PromptHistory | null> {
    const result = await this.service.promptHistory({
      where: params,
      select: {
        change: true,
        createdAt: true,
        id: true,

        prompt: {
          select: {
            id: true,
          },
        },

        timestamp: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: PromptHistory })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePromptHistory(
    @common.Param() params: PromptHistoryWhereUniqueInput,
    @common.Body() data: PromptHistoryUpdateInput
  ): Promise<PromptHistory | null> {
    try {
      return await this.service.updatePromptHistory({
        where: params,
        data: {
          ...data,

          prompt: data.prompt
            ? {
                connect: data.prompt,
              }
            : undefined,
        },
        select: {
          change: true,
          createdAt: true,
          id: true,

          prompt: {
            select: {
              id: true,
            },
          },

          timestamp: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: PromptHistory })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePromptHistory(
    @common.Param() params: PromptHistoryWhereUniqueInput
  ): Promise<PromptHistory | null> {
    try {
      return await this.service.deletePromptHistory({
        where: params,
        select: {
          change: true,
          createdAt: true,
          id: true,

          prompt: {
            select: {
              id: true,
            },
          },

          timestamp: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
