/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { PromptCategory } from "./PromptCategory";
import { PromptCategoryCountArgs } from "./PromptCategoryCountArgs";
import { PromptCategoryFindManyArgs } from "./PromptCategoryFindManyArgs";
import { PromptCategoryFindUniqueArgs } from "./PromptCategoryFindUniqueArgs";
import { CreatePromptCategoryArgs } from "./CreatePromptCategoryArgs";
import { UpdatePromptCategoryArgs } from "./UpdatePromptCategoryArgs";
import { DeletePromptCategoryArgs } from "./DeletePromptCategoryArgs";
import { PromptCategoryService } from "../promptCategory.service";
@graphql.Resolver(() => PromptCategory)
export class PromptCategoryResolverBase {
  constructor(protected readonly service: PromptCategoryService) {}

  async _promptCategoriesMeta(
    @graphql.Args() args: PromptCategoryCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [PromptCategory])
  async promptCategories(
    @graphql.Args() args: PromptCategoryFindManyArgs
  ): Promise<PromptCategory[]> {
    return this.service.promptCategories(args);
  }

  @graphql.Query(() => PromptCategory, { nullable: true })
  async promptCategory(
    @graphql.Args() args: PromptCategoryFindUniqueArgs
  ): Promise<PromptCategory | null> {
    const result = await this.service.promptCategory(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => PromptCategory)
  async createPromptCategory(
    @graphql.Args() args: CreatePromptCategoryArgs
  ): Promise<PromptCategory> {
    return await this.service.createPromptCategory({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => PromptCategory)
  async updatePromptCategory(
    @graphql.Args() args: UpdatePromptCategoryArgs
  ): Promise<PromptCategory | null> {
    try {
      return await this.service.updatePromptCategory({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PromptCategory)
  async deletePromptCategory(
    @graphql.Args() args: DeletePromptCategoryArgs
  ): Promise<PromptCategory | null> {
    try {
      return await this.service.deletePromptCategory(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
