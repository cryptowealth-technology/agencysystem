/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, PromptCategory as PrismaPromptCategory } from "@prisma/client";

export class PromptCategoryServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.PromptCategoryCountArgs, "select">
  ): Promise<number> {
    return this.prisma.promptCategory.count(args);
  }

  async promptCategories(
    args: Prisma.PromptCategoryFindManyArgs
  ): Promise<PrismaPromptCategory[]> {
    return this.prisma.promptCategory.findMany(args);
  }
  async promptCategory(
    args: Prisma.PromptCategoryFindUniqueArgs
  ): Promise<PrismaPromptCategory | null> {
    return this.prisma.promptCategory.findUnique(args);
  }
  async createPromptCategory(
    args: Prisma.PromptCategoryCreateArgs
  ): Promise<PrismaPromptCategory> {
    return this.prisma.promptCategory.create(args);
  }
  async updatePromptCategory(
    args: Prisma.PromptCategoryUpdateArgs
  ): Promise<PrismaPromptCategory> {
    return this.prisma.promptCategory.update(args);
  }
  async deletePromptCategory(
    args: Prisma.PromptCategoryDeleteArgs
  ): Promise<PrismaPromptCategory> {
    return this.prisma.promptCategory.delete(args);
  }
}
